import asyncio
import logging
import datetime
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy import select

from config import settings
from models import Base, engine, AsyncSessionLocal, User, Document
from services.pdf_parser import parse_pdf
from services.docx_parser import parse_docx
from services.html_report_generator import generate_report_pdf
from services.llm_client import analyze_contract

logging.basicConfig(level=logging.INFO)
bot = Bot(token=settings.TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()

async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    me = await bot.get_me()
    logging.info(f"‚úÖ Bot started as @{me.username}")

async def get_or_create_user(session: AsyncSessionLocal, tg_id: int) -> User:
    result = await session.execute(select(User).where(User.telegram_id == tg_id))
    user = result.scalars().first()
    if not user:
        user = User(telegram_id=tg_id)
        session.add(user)
        await session.commit()
        await session.refresh(user)
    return user

@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å PDF –∏–ª–∏ DOCX, —è –ø–æ—Å—á–∏—Ç–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω—é –∞–Ω–∞–ª–∏–∑."
    )
    history_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤", callback_data="show_history")]
        ]
    )
    await msg.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.",
        reply_markup=history_kb
    )

@dp.message(F.text)
async def echo(msg: types.Message):
    await msg.answer(f"‚úÖ –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")

@dp.message(F.document)
async def handle_document(msg: types.Message):
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, msg.from_user.id)
        file = await bot.get_file(msg.document.file_id)
        ext = msg.document.file_name.rsplit('.', 1)[-1].lower()
        path = f"downloads/{msg.document.file_unique_id}.{ext}"
        await bot.download_file(file.file_path, destination=path)

        if ext == "pdf":
            text, page_count = await parse_pdf(path)
        elif ext in ("docx", "doc"):
            text, page_count = await parse_docx(path)
        else:
            return await msg.answer("‚ùå –¢–æ–ª—å–∫–æ PDF –∏ DOCX.")

        if not text.strip():
            return await msg.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞."
            )

        doc = Document(
            user_id=user.id,
            file_path=path,
            extracted_text=text,
            page_count=page_count,
            is_paid=False
        )
        session.add(doc)
        await session.commit()
        await session.refresh(doc)

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{doc.id}")]
            ]
        )
        await msg.answer(
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: <b>{page_count}</b>. –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=markup
        )

@dp.callback_query(F.data.startswith("paid:"))
async def handle_paid(callback: types.CallbackQuery):
    doc_id = int(callback.data.split(':', 1)[1])
    async with AsyncSessionLocal() as session:
        doc = await session.get(Document, doc_id)
        if not doc or doc.is_paid:
            return await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        doc.is_paid = True
        await callback.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶")
        result = await analyze_contract(doc.extracted_text)
        doc.analysis = {"result": result}
        doc.analyzed_at = datetime.datetime.utcnow()
        session.add(doc)
        await session.commit()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF-–æ—Ç—á—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    pdf_path = f"report_{doc_id}.pdf"
    generate_report_pdf(doc, doc.analysis, pdf_path)
    await callback.message.answer_document(
        FSInputFile(pdf_path, filename=f"report_{doc_id}.pdf"),
        caption="üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É"
    )
    os.remove(pdf_path)

@dp.callback_query(F.data == "show_history")
async def show_history(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        user_res = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = user_res.scalars().first()
        if not user:
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤.", show_alert=True)
        docs_res = await session.execute(
            select(Document)
            .where(
                Document.user_id == user.id,
                Document.is_paid == True,
                Document.analysis.is_not(None)
            )
            .order_by(Document.analyzed_at.desc())
        )
        docs = docs_res.scalars().all()

    if not docs:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤.", show_alert=True)

    lines = []
    for doc in docs:
        date = doc.analyzed_at.strftime("%Y-%m-%d %H:%M")
        snippet = doc.analysis["result"][:100].replace("\n"," ")
        lines.append(f"{date} ‚Äî #{doc.id}: {snippet}...")
    await callback.message.answer(
        "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:</b>\n" + "\n".join(lines),
        parse_mode="HTML"
    )

if __name__ == "__main__":
    logging.info("üöÄ Initializing database‚Ä¶")
    logging.info("üöÄ Starting polling‚Ä¶")
    dp.run_polling(bot, on_startup=on_startup)